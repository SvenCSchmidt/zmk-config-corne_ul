#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hmls: homerow_mod_lshift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
            bindings = <&kp>, <&kp>;
        };

        hmrs: homerow_mod_rshift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
            bindings = <&kp>, <&kp>;
        };

        hmla: homerow_mod_altl {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hmra: homerow_mod_altr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <800>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        Cmb_UmlA {
            bindings = <&kp RA(Q)>;
            key-positions = <1 13>;
            layers = <0>;
        };

        Cmb_UmlO {
            bindings = <&kp RA(P)>;
            key-positions = <10 22>;
            layers = <0>;
        };

        Cmb_UmlU {
            bindings = <&kp RA(Y)>;
            key-positions = <8 20>;
            layers = <0>;
        };

        Cmb_UmlS {
            bindings = <&kp RA(S)>;
            key-positions = <3 15>;
            layers = <0>;
        };

        Cmb_EUR {
            bindings = <&kp RA(N5)>;
            key-positions = <20 32>;
            layers = <0>;
        };

        Cmb_DQT {
            bindings = <&kp DQT>;
            key-positions = <2 14>;
            layers = <2>;
        };

        Cmb_Grave {
            bindings = <&kp GRAVE>;
            key-positions = <14 26>;
            layers = <2>;
        };

        Cmb_LSFT {
            bindings = <&kp LSHFT>;
            key-positions = <15 16>;
            layers = <0 2 3>;
        };

        Cmb_RSFT {
            bindings = <&kp RSHFT>;
            key-positions = <19 20>;
            layers = <0 1 2 3>;
        };

        Cmb_LGUI {
            bindings = <&kp LGUI>;
            key-positions = <13 25>;
            layers = <0 2>;
        };

        Cmb_RGUI {
            bindings = <&kp RGUI>;
            key-positions = <22 34>;
            layers = <0 2>;
        };

        Cmb_ESC {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0 1 2 3 4>;
        };

        Cmb_TAB {
            bindings = <&kp TAB>;
            key-positions = <28 27>;
            layers = <0 1 2 4>;
        };

        Cmb_CLCK {
            bindings = <&kp CLCK>;
            key-positions = <15 16 19 20>;
            layers = <1>;
        };

        Cmb_CLCKs {
            bindings = <&kp CLCK>;
            key-positions = <14 15 16>;
            layers = <1>;
        };

        Cmb_BSPC {
            bindings = <&kp BSPC>;
            key-positions = <31 32>;
            layers = <0 2 4>;
        };

        Cmb_DEL {
            bindings = <&kp DEL>;
            key-positions = <32 33>;
            layers = <0 2 4>;
        };

        Cmb_CtrlBSPC {
            bindings = <&kp LC(BSPC)>;
            key-positions = <31 32 33>;
            layers = <0 2>;
        };

        Cmb_CtrlDEL {
            bindings = <&kp LC(DEL)>;
            key-positions = <32 33 34>;
            layers = <0 2>;
        };

        Cmb_WordLeft {
            bindings = <&kp LC(LEFT)>;
            key-positions = <14 15>;
            layers = <1>;
        };

        Cmb_WordRight {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <15 16>;
            layers = <1>;
        };

        Cmb_Cut {
            bindings = <&kp LC(X)>;
            key-positions = <25 26>;
            layers = <0>;
        };

        Cmb_Copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
            layers = <0>;
        };

        Cmb_Paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 29>;
            layers = <0>;
        };

        Cmb_Reset {
            bindings = <&bootloader>;
            key-positions = <14 16 15>;
            layers = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "Base";
            bindings = <
&none  &kp Q  &kp W         &kp F          &kp P         &kp B        &kp J        &kp L         &kp U          &kp Y           &kp SEMI  &none
&none  &kp A  &hmla LALT R  &hmls LSHFT S  &bhm LCTRL T  &kp G        &kp M        &bhm RCTRL N  &hmrs RSHFT E  &hmla LALT I    &kp O     &none
&none  &kp Z  &hmra RALT X  &kp C          &kp D         &kp V        &kp K        &kp H         &kp COMMA      &hmra RALT DOT  &kp FSLH  &none
                            &kp ESC        &kp BSPC      &lt 1 RET    &lt 2 SPACE  &kp DEL       &none
            >;
        };

        nav {
            label = "nav";
            bindings = <
&none  &kp ESC   &kp PSCRN        &kp UP    &kp INS    &kp PG_UP    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &kp HOME  &kp LEFT         &kp DOWN  &kp RIGHT  &kp END      &kp K_APP     &kp RCTRL     &kp RSHFT     &kp LALT      &kp RGUI      &none
&none  &kp SLCK  &kp PAUSE_BREAK  &kp BSPC  &kp DEL    &kp PG_DN    &none         &bt BT_PRV    &bt BT_NXT    &kp RALT      &bt BT_CLR    &none
                                  &trans    &trans     &none        &mo 3         &none         &none
            >;
        };

        num {
            label = "num";
            bindings = <
&none  &kp RS(N1)  &kp RS(N2)      &kp RS(N3)      &kp RS(N4)     &kp RS(N5)    &kp LS(N6)  &kp LS(N7)     &kp LS(N8)      &kp LS(N9)      &kp LS(N0)  &none
&none  &kp N1      &hmla LALT N2   &hmls LSHFT N3  &bhm LCTRL N4  &kp N5        &kp N6      &bhm LCTRL N7  &hmrs RSHFT N8  &hmla LALT N9   &kp N0      &none
&none  &kp MINUS   &hmra RALT SQT  &kp EQUAL       &kp LPAR       &kp LBKT      &kp RBKT    &kp RPAR       &kp COMMA       &hmra RALT DOT  &kp BSLH    &none
                                   &trans          &trans         &tog 4        &none       &none          &none
            >;
        };

        fun {
            label = "fun";
            bindings = <
&none  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10   &none
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &kp F11    &kp F12  &kp RCTRL  &kp RSHFT  &kp LALT  &kp RGUI  &none
&none  &none     &kp RALT  &none      &none      &none      &none    &none      &none      &kp RALT  &none     &none
                           &none      &none      &none      &none    &none      &none
            >;
        };

        pad {
            label = "pad";
            bindings = <
&none  &to 0  &none  &none     &none    &none      &kp FSLH   &kp N7  &kp N8  &kp N9  &kp MINUS  &none
&none  &none  &none  &none     &none    &none      &kp STAR   &kp N4  &kp N5  &kp N6  &kp PLUS   &none
&none  &none  &none  &kp BSPC  &kp DEL  &none      &kp N0     &kp N1  &kp N2  &kp N3  &kp COMMA  &none
                     &none     &none    &kp RET    &kp SPACE  &none   &none
            >;
        };
    };
};

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };
